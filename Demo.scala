/**  * Created by jayachandranj on 1/13/17.  */import java.io._;import Run._;import java.util._;class Point(val xc: Int, val yc: Int) {  var x: Int = xc;  var y: Int = yc;  def move(dx: Int, dy: Int) {    x = x + dx;    y = y + dy;    println ("Point x location : " + x);    println ("Point y location : " + y);  }};class Location(override val xc: Int, override val yc: Int,               val zc :Int) extends Point(xc,yc){  var z :Int = zc;  def move(dx: Int, dy: Int, dz: Int) {    x = x + dx;    y = y + dy;    z = z + dz;    println ("Location x location : " + x);    println ("Location y location : " + y);    println ("Location z location : " + z);  }};  object Demo {    def time() = {      println("Getting time in nano seconds");      System.currentTimeMillis();    };    def delayed( t: => Long ) = {      println("In delayed method");      println("Param: " + t);    };    def printStrings( args:String* ) = {      var i : Int = 0;      for( arg <- args ){        println("Arg value[" + i + "] = " + arg );        i = i + 1;      };    };    def factorial(i : Int): Int ={      def fact(i : Int, accumalator : Int) : Int = {        if (i <= 1)          accumalator;          else          fact(i - 1, i * accumalator);        };        return fact(i,1);    };    def factorial(i : BigInt): BigInt ={        if (i <= 1)          1;        else          i * factorial (i - 1);    };    def log(date: Date, message: String)  = {      println(date + "----" + message)    };   // println( apply(layout, 10) );    def apply(f : Int => Int, v: Int )  = f(v);    def layout[A](x : A) = x ;    def strcat(s1:String)( s2:String) ={      s1 + s2    };    def addInt(a:Int, b:Int) :Int ={      var sum:Int =0;      sum = a+b;      return sum;    };    trait Equal {      def isEqual(x: Any): Boolean;      def isNotEqual(x: Any): Boolean = !isEqual(x);    };    class PointEqual(xc: Int, yc: Int) extends Equal {      var x: Int = xc;      var y: Int = yc;      def isEqual(obj: Any) = obj.isInstanceOf[PointEqual] && obj.asInstanceOf[PointEqual].x == y;    };    def main(args: Array[String]) {    val pt = new Point(10, 20);    // Move to a new location    pt.move(10, 10);    val loc = new Location(10, 20, 30);    // Move to a new location    loc.move(10, 10, 10);    2 times println(20);    delayed(time());    printStrings("Hello", "Scala", "Python");    for (i <- 1 to 5)    println("The factorial for "+ i +" is ...."+factorial(i));    val date = new Date;    log(date, "message1" );    Thread.sleep(1000);    log(date, "message2" );    Thread.sleep(1000);    log(date, "message3" );    println( apply(layout, 10) );      val str1:String = "Hello, ";      val str2:String = "Scala!";      println( "str1 + str2 = " +  strcat(str1)(str2) );      println( "The addition of 5 and 7 is " + addInt(5,7));      var factor = 3;      val multiplier = (i:Int) => i * factor;      println( "multiplier of 3 * i = " +  multiplier(2));      val p1 = new PointEqual(2, 3);      val p2 = new PointEqual(2, 4);      val p3 = new PointEqual(3, 3);      println(p1.x+"...." +p1.y+"======"+p3.x+">>>>>>"+p3.y+p1.isEqual(p3));  }}